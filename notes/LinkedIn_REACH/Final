After college, I moved to Korea, where an average worker gets paid $2,300 USD a month and well-paid developers twice that. In a hyper competitive society that is Seoul, without a college degree, I went to making $6,000 a month teaching part time by combining my strengths to tap a niche market.

When I moved to Korea without a degree, I didn't have many options, so I simply continued to teach math as a private tutor, something I've been doing since high school. However, as I spent more time teaching with traditional material, books and paper, I hit the limits of it more frequently. 

Static images, graphs, and even videos were nonsensical to kids who already had skewed understanding of the basics. They simply didn't get it. Because they didn't understand the basics, any "rule" was arbitrary and random as the spells in Harry Potter books. For example, they didn't understand why 1/2 + 1/3 wasn't 1/5. "Can't you just add the top and the bottom?" they'd ask. 

To address their inquiry, I would cut three sheets of identical square paper into two, three, and five equal pieces, respectively. I would then put the 1/2 and 1/3 piece together to show that it does not equal two the size of two 1/5 pieces. After dispelling their misconceptions, it was easier to move forward with why we had to change the denomination. 

Another student had trouble understanding how carrying up/down worked in adding/subtracting. We practiced with real Korean money. I helped him understand place values with money denominations (10, 100, and 1000 won). After adding, to have the least number of coins/bills, he had to exchange, say, thirteen 100 won coins to one 1000 won bill and three 100 won coins. 

My approach worked, but it was tedious, and only during lesson. After the lesson, the students had hard time recreating what we did during class. Notes had too many words and seemed too technical to them (remember, these are struggling students).

I searched for apps that could do what I wanted, but they rarely existed, and in different places. So I decided to build my own apps using jQuery. I let a student try one of my firs apps, Algebra Basics (http://misterjko.com/#sect-algebra-basics). It worked. After a while the student grasped the concept. From there I built more apps. As more apps were built, I decided to gather them into one place, and make a platform out of it. That platform was Steps Education. Besides simply hosting a bunch of apps, now I could assign homework, track progress, note active time (so students can't lie about how much time they spent on it), give students rewards, and notify parents of their missed homework -- all automatically. 

 Not only did I develop the full stack, but also had to do other aspects of the business as well. I had to translate parents' concerns into business objective, manage finance, seek out new clients, and prep lessons. Hardest of the work was convincing parents of my approach, which I later learned was the same as Montessori's. (Korean parents, having been accustomed to education designed to cull the weak, instead of nurturing growing minds, were ambivalent about the risk/payout of my approach.)

But the work paid off. In Korea, I wouldn't have made as much as just a programmer, or just a tutor. However, by combining my skills, I overcame my lack of a degree, widely regarded as the ticket to financial success. 

Despite my success, however, I came back to the States. After meeting my wife and having a baby, I realized political, social, and political environments in Korea were not suitable for raising a family.  Since coming back, I've been helping my wife adjust to the life in the States, refining my coding skill, and applying to jobs. 

 Since my venture, I have been doing everything with a sense of bigger purpose; of how my work fits in the grand scheme. My experience gives me the confidence to inspire great ideas, and people to be ambitious, which, I hope, will prove to be valuable in LinkedIn REACH program.
---
The very first programming I did was in kindergarten. My mom sent me and my brother to a computer academy during one summer, where we had to make a turtle on a green CRV monitor make certain shapes. I didn't know what it was at the time, or why I was there. I just thought it was a game. That lasted about three weeks. 

From there, I had various encounters with programming. In middle and high school, I tinkered with "look & feel" of various proto-social media, such as Xanga, Asian Avenue, and MySpace. When I went to college, I saw my friends doing homework for a computer science course. One of them said "it was hard." It sounded like a challenge.

So the next quarter, I enrolled into CSE 142 at the University of Washington, an introductory course open to everyone that focuses on OOP, data structure, and basic algorithms with Java. As a math major, I took all the open CS courses, learning more advanced algorithms and data structure, and the web stack along the way. 

The courses were sufficient to stoke my spark of interest, but the real programming journey (i.e. never ending) started after college, as I worked on my online education platform, Steps Education. 

Whereas in college I only had to write programs that met certain narrowly defined criteria, I had to design and make everything from ground up for my platform. Before the coding part even begins, I had to sketch out what my code was supposed to do, what business objective it had to meet, establish the boundary of its capabilities, design test cases, then begin to code. I had to envision how an individual module would fit into the larger program, and plan accordingly. I had to do front and back end, database, hosting, data visualization, design, and UI/UX. I had to consider browser compatibility, as a third of Koreans still use IE, and the fact that most of my users were elementary school kids. 

Building my platform helped me realize why MVC paradigms were used; why I shouldn't future-proof my code; the importance of documentation, both for myself from others. I learned how to use Git, found my ideal IDE, Cloud9, and SASS. The biggest lesson I learned, however, is that programming process starts before the first line of code. 

From my time working on Steps Education, my JavaScript/jQuery knowledge and skill became good enough to pass initial tests in sites like TripleByte or TopTal, but I do realize the room for improvement. Currently, I am refining and learning SASS, the new ES7 standards, and Node and Vue. I am also supplementing, improving, and debugging Steps Education source code as I learn new things. 

At first, I started to code because it was challenging and therefore fun. However, the more I coded, and the more I see the world around me, I realize the multiplicative power of computer and its ability have impact at grand scale. Now I code with the aim of improving the world somehow, even if itâ€™s in some obscure unseen way. 

It may sound like I stole some library's slogan, but I do believe that life is a learning journey. Accordingly, I have structured my schedule to include time just for learning, even if it's not programming. This way, when new standards, framework, or language comes along, I don't have to try to make time for it. 
---
0.1 + 0.2 === 0.3 // false in JS 

is what got me started. In math-teaching platform, such flaw shouldn't exist. The easy solution was to simply round off errors, but this, too, wasn't ideal, as I needed a way to distinguish student's response of, say, 0.3333 (terminating decimal), from 0.3... (repeating decimal). 

I needed a library that produced the correct answer, not a good enough one; a reliable way to generate big integers, small decimals, mixed numbers, proper fraction, repeating and terminating decimal; and most importantly, work with them. I needed the library to add, subtract, multiply, divide, and find the greatest common divisor, all of which was for elementary math. I needed something that could handle higher level math. Nothing like it existed. So I began to develop my own. 

I had two initial goals: to calculate with and to as many digits as I needed; and to be able to do any basic arithmetic function with rational numbers. 

The idea for the first goal was simple: make computer do math the way humans do. For example, to add 50 digit and 40 digit numbers, it would turn those numbers into string, and take one digit from the back of each numbers and add them up to the front. Then I optimized by turning the numbers into array of digits. 

The key to the second task was making all valid inputs, including repeating decimals, into fraction. By definition, rational number is a number that can be represented as a fraction A/B, where A and B are integers, and B is non-zero.  

I met my goals. My library could calculate something like factorial of 2000 in browser. It understands that 0.333333... = 1/3. It could do all basic arithmetic with rational numbers. 

While making the individual math functions wasn't too difficult, I wanted to design the library like jQuery to make it easy to use for now and in the future. From the surface, the library may seem like OOP, but inside it's actually written as a functional program. It makes sense, since we're dealing with math. Math is already a language. It just had to be translated to computer programming language. 

The solid arithmetic will serve as the foundation for higher level math functions. Surprising number of seemingly complex math operations can be accurately estimated with something called series, which can be done with loops or recursive functions on computer. By doing some simple arithmetic arbitrary number of times, we can calculate something like sin(PI ) with more precision. JavaScript produces 1.2246467991473532e-16 for sin(PI). It should be 0.  

So far, I have not found a math library dedicated to, math beyond arithmetic. Comparable ones that I found have certain features missing, which makes them unsuitable for using for higher level math. That's why I am working to open sourcing it, so the bright minds smarter than me can help improve it. Itâ€™s hard to be optimistic about the size of audience who need this library. However, I do know there is someone out there who would want to use it, and I am going to work on it. 
